"""
Django settings for blogModel project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# SECURITY WARNING: don't run with debug turned on in production!
# Use environment variable for DEBUG in production
# In development, default to True
DEBUG = os.environ.get("DJANGO_DEBUG", "False") == "True"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Use environment variable for SECRET_KEY in production
# In development, use this fallback key
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", None)
if not SECRET_KEY and DEBUG is not True:
    print(SECRET_KEY, DEBUG)
    raise RuntimeError(
        "DJANGO_SECRET_KEY environment variable must be set in production"
    )

# Warn / fail if SECRET_KEY is weak in production
if SECRET_KEY:
    _weak_key = (
        len(SECRET_KEY) < 50
        or SECRET_KEY.startswith("django-insecure-")
        or len(set(SECRET_KEY)) < 5
    )
    if _weak_key and DEBUG is not True:
        raise RuntimeError(
            "DJANGO_SECRET_KEY is too weak for production. Generate a secure, random value (>=50 chars)."
        )

_raw_hosts = os.environ.get("DJANGO_ALLOWED_HOSTS", "example.com")
ALLOWED_HOSTS = [h.strip() for h in _raw_hosts.split(",") if h.strip()]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "website",
    "bootstrap",
    "phonenumber_field",
    "csp",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "csp.middleware.CSPMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "website.middleware.Custom404Middleware",
]

MESSAGE_STORAGE = "django.contrib.messages.storage.cookie.CookieStorage"

ROOT_URLCONF = "blogModel.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "website/templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "blogModel.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

if "test" in sys.argv:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "blogModel/settings/db.sqlite3",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 10,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Keep the project's legacy password checks available via Django's validator
# framework so we can call `validate_password()` from views/forms while
# preserving the original learning-oriented rules. The custom validator is
# implemented in `website.validators.LegacyPasswordValidator`.
AUTH_PASSWORD_VALIDATORS.insert(
    1, {"NAME": "website.validators.LegacyPasswordValidator"}
)

# Prefer Argon2 for password hashing when available. Requires argon2-cffi in
# the environment (already added to requirements.txt).
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]

AUTH_USER_MODEL = "website.User"

PHONENUMBER_DEFAULT_REGION = "BR"


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "pt-br"

TIME_ZONE = "America/Sao_Paulo"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "website/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_DIRS = (os.path.join(BASE_DIR, "website/static"),)

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Django-CSP >=4.0 configuration (new format)
CONTENT_SECURITY_POLICY = {
    "DIRECTIVES": {
        "default-src": ("'self'",),
        "style-src": ("'self'", "https://fonts.googleapis.com"),
        "font-src": ("'self'", "https://fonts.gstatic.com"),
        "script-src": (("'self'",)),
        "img-src": (
            "'self'",
            "data:",
            "https://i.ytimg.com",
            "https://img.youtube.com",
            "https://ytimg.googleusercontent.com",
        ),
        "frame-src": (
            "'self'",
            "https://www.youtube.com",
            "https://youtube.com",
            "https://www.youtube-nocookie.com",
            "https://player.vimeo.com",
        ),
    }
}

# Include nonces for script-src so templates can use {% csp_nonce %}
CSP_INCLUDE_NONCE_IN = ("script-src",)

if not DEBUG:
    # Cookies
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True

    # HSTS
    SECURE_HSTS_SECONDS = int(os.environ.get("SECURE_HSTS_SECONDS", 31536000))
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

    # SSL redirect (only if you terminate SSL at Django or trust proxy)
    SECURE_SSL_REDIRECT = (
        False if DEBUG else True
    )  # os.environ.get("SECURE_SSL_REDIRECT", "True") == "True"
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

    # XSS / clickjacking
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = "DENY"

    # Referrer policy
    SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"
